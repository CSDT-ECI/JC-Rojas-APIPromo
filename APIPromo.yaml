openapi: 3.0.3
info:
  title: APIPromo API
  description: APIPromo API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /promos:
    get:
      summary: GET  all promos
      operationId: getAllPromos
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promo'
      tags:
        - Promos
    post:
      summary: POST create promo
      operationId: createPromo
      tags:
        - Promos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPromoRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promo'
  /areas:
    get:
      summary: GET All areas
      operationId: getAllAreas
      tags:
        - Areas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
    post:
      summary: POST create area
      operationId: createArea
      tags:
        - Areas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AreaRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
  /areas/{areaId}/check/{method}:
    post:
      summary: check if point is in given area using methods CN/WN
      operationId: checkPointInArea
      tags:
        - Areas
      parameters:
        - name: areaId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: method
          in: path
          required: true
          schema:
            type: string
            enum:
              - CN
              - WN
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckPointRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '404':
          description: Requested Area not found
  /areas/{areaId}/checkall/{method}:
    post:
      summary: check if a set of points is in given area using methods CN/WN
      operationId: checkAllPointsInArea
      tags:
        - Areas
      parameters:
        - name: areaId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: method
          in: path
          required: true
          schema:
            type: string
            enum:
              - CN
              - WN
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckManyPointRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: boolean
        '404':
          description: Requested Area not found
  /areas/{id}:
    delete:
      summary: DELETE ALL areas
      operationId: deleteAreaById
      tags:
        - Areas
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: Area deleted
  /users:
    get:
      summary: GET all users
      operationId: getAllUsers
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: POST create user
      operationId: createUser
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: DELETE ALL users
      operationId: deleteAllUsers
      tags:
        - Users
      responses:
        '202':
          description: Users Deleted
  /users/{userId}:
    get:
      summary: GET user by ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found with the given ID
    patch:
      summary: PATCH Modify fcmId of User
      operationId: patchUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found with the given ID
  /users/{userId}/locations/{day}:
    put:
      summary: PUT Update locations of user for a specific day
      operationId: editLocationByDayAndUserId
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: day
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/WeekDay'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found with the given ID
components:
  schemas:
    WeekDay:
      type: string
      enum:
        - SUNDAY
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
    Point:
      type: object
      properties:
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
      required:
        - x
        - 'y'
    Polygon:
      type: object
      properties:
        name:
          type: string
        points:
          type: array
          items:
            $ref: '#/components/schemas/Point'
      required:
        - name
        - points
    Area:
      type: object
      properties:
        id:
          type: integer
          format: int64
        polygon:
          $ref: '#/components/schemas/Polygon'
        promos:
          type: array
          items:
            $ref: '#/components/schemas/Promo'
      required:
        - polygon
        - promos
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        fcmId:
          type: string
        locations:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Point'
        promos:
          type: array
          items:
            $ref: '#/components/schemas/Promo'
      required:
        - name
        - fcmId
        - locations
        - promos
    Promo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - PERCENT
            - PRICE
        value:
          type: integer
          format: int32
        service:
          type: string
        description:
          type: string
        threshold:
          type: integer
          format: int32
        areas:
          type: array
          items:
            $ref: '#/components/schemas/Area'
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - code
        - startDate
        - areas
        - users
        - threshold
    AddPromoRequest:
      type: object
      properties:
        code:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - PERCENT
            - PRICE
        value:
          type: integer
          format: int32
        service:
          type: string
        description:
          type: string
        areaIds:
          type: array
          items:
            type: integer
            format: int64
        threshold:
          type: integer
          format: int32
      required:
        - code
        - startDate
        - type
        - service
        - description
        - areaIds
        - threshold
    AreaRequest:
      type: object
      properties:
        name:
          type: string
        points:
          type: array
          items:
            $ref: '#/components/schemas/Point'
      required:
        - name
        - points
    CheckPointRequest:
      type: object
      properties:
        point:
          $ref: '#/components/schemas/Point'
      required:
        - point
    CheckManyPointRequest:
      type: object
      properties:
        points:
          type: array
          items:
            $ref: '#/components/schemas/Point'
      required:
        - points
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    PatchUserRequest:
      type: object
      properties:
        fcm:
          type: string
      required:
        - fcm
    UpdateLocationRequest:
      type: object
      properties:
        location:
          type: array
          items:
            $ref: '#/components/schemas/Point'
      required:
        - location
